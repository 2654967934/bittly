module.exports = {
    moduleName : 'Panel',
    editMode : {
        defaultName : 'Untitled Panel',
        variableAdd : 'Add New Variable',
        variableName : 'Name',
        variableDataType : 'Data Type',
        variableDefault : 'Default Value',
        variableDeleteConfirm : 'Are you sure you want to delete this variable ?',
        variableEditTitle : 'Variable',
        variableEditNameExists : 'variable name already exists.',
        panelSaved : 'Panel saved',
        panelSaveFailed : 'Panel save failed',
        panelDeleteSuccess : 'Panel deleted',
        panelDeleteConfirmTitle : 'Panel Delete',
        panelDeleteConfirmContent : 'Are you sure you want to delete this panel ?',
        panelChangedSaveConfirmTitle : 'Panel Changed',
        panelChangedSaveConfirmContent : 'Panel data has been modified, would you like to save it ?',
        widgetSettingScriptSnippet : 'Code Snippet',
        widgetSettingScriptSnippetDirectiveExecText : 'Execute Directive With Text Params',
        widgetSettingScriptSnippetDirectiveExecHex : 'Execute Directive With Hex Params',
        widgetSettingScriptSnippetDirectiveExecForm : 'Execute Directive With Form Params',
        widgetSettingScriptSnippetVariableGet : 'Get Runtime Variable',
        widgetSettingScriptSnippetVariableSet : 'Set Runtime Variable',
        widgetSettingScriptSnippetMsleep : 'Delay',
        widgetSettingScriptSnippetWidgetValueGet : 'Get Widget Value',
        widgetSettingScriptSnippetWidgetDataSet : 'Set Widget Data Value',
        widgetSettingTitle : 'Widget Setting',
        widgetSettingAction : 'Action',
        widgetSettingActionVariable : 'Update Variable',
        widgetSettingActionDirective : 'Send Directive',
        widgetSettingActionScript : 'Run Script',
        widgetSettingBindDirective : 'Directive',
        widgetSettingRequestParams : 'Parameters',
        widgetSettingRequestParamQuickInputLabel : 'Variable : {0}',
        widgetSettingResponseToVariable : 'Variable',
        widgetSettingResponseParserEnable : 'Enable Response Parser',
        widgetSettingResponseParserNone : 'None',
        widgetSettingResponseParserRaw : 'RAW',
        widgetSettingResponseParserForm : 'Format',
        widgetSettingResponseParserJson : 'JSON',
        widgetSettingViewerVariable : 'Variable',
        widgetSettingDataSource : 'Data Source',
        widgetSettingDataSourceVariable : 'Variable',
        widgetSettingDataSourceScript : 'Script',
        widgetSettingDataSourceExpression :'Expression',
        panelNamePlaceholder : 'Panel Name',
        widgetDeleteConfirm : 'Are you sure you want to delete this widget ?',
        widgetPanelTitle : 'Widget',
        variablePanelTitle : 'Variable',
        widgetMoveFrontOneLayer : 'Move to front one layer',
        widgetMoveBackOneLayer : 'Move to back one layer',
        widgetDataSourceExprUnableToReadVariable : 'Failed to execute expression, unable to access variable "{0}"',
        widgetDataSourceExprFailedToExecuteExpr : 'Failed to execute expression [{0}] => [{1}] : {2}',
    },

    noActivePanelDesc : 'Please open or create a panel',
    btnCreatePanel : 'Create Panel',
    mode : {
        edit : 'Edit Mode',
        run : 'Run Mode',
    },
    widgetTooltip : 'Tooltip',
    widgetResize: 'Size',
    widgetResizeHeight : 'Height',
    widgetResizeWidth : 'Width',
    widgets : {
        button : require('../widgets/button/i18n/en.lang.js'),
        switch : require('../widgets/switch/i18n/en.lang.js'),
        textInput : require('../widgets/text-input/i18n/en.lang.js'),
        numberInput : require('../widgets/number-input/i18n/en.lang.js'),
        slider : require('../widgets/slider/i18n/en.lang.js'),
        radio : require('../widgets/radio/i18n/en.lang.js'),
        select : require('../widgets/select/i18n/en.lang.js'),
        label : require('../widgets/label/i18n/en.lang.js'),
        progressBar : require('../widgets/progress-bar/i18n/en.lang.js'),
        textViewer : require('../widgets/text-viewer/i18n/en.lang.js'),
        numberViewer : require('../widgets/number-viewer/i18n/en.lang.js'),
        battery : require('../widgets/battery/i18n/en.lang.js'),
        thermometer : require('../widgets/thermometer/i18n/en.lang.js'),
        gauge : require('../widgets/gauge/i18n/en.lang.js'),
        led : require('../widgets/led/i18n/en.lang.js'),
        lineChart : require('../widgets/line-chart/i18n/en.lang.js'),
        timer : require('../widgets/timer/i18n/en.lang.js'),
        liquidfill : require('../widgets/liquidfill/i18n/en.lang.js'),
        terminal : require('../widgets/terminal/i18n/en.lang.js'),
        angleIndicator : require('../widgets/angle-indicator/i18n/en.lang.js'),
        offsetAngleIndicator : require('../widgets/offset-angle-indicator/i18n/en.lang.js'),
        groupbox : require('../widgets/groupbox/i18n/en.lang.js'),
        map : require('../widgets/map/i18n/en.lang.js'),
        threeDOriViewer : require('../widgets/3d-orientation-viewer/i18n/en.lang.js'),
    },
    dialogWidgetSetting : {
        title : 'Widget Setting',
        bindDirective : 'Directive',
        requestParams : 'Parameters',
        responseToVariable : 'Variable',
        responseParserEnable : 'Enable Response Parser',
        viewerVariable : 'Variable',
        actionScript : 'Script',
        action : {
            label : 'Action',
            variable : 'Update Variable',
            directive : 'Send Directive',
            script : 'Run Script',
        },
        dataSource : {
            label : 'Data Source',
            variable : 'Variable',
            script : 'Script',
        },
    },
    dialogVariableSetting : {
        title : 'Variable Setting',
        varName : 'Name',
        varNameExists : 'Variable name already exists.',
        dataType : 'Data Type',
        varDefaultValue : 'Default Value',
    },
    
    runMode : {
        log : 'Log',
        dataTrans : 'Data Transmission',
        variablePanelTitle : 'Variable',
        widgetHasNoAction : 'this widget has no action.',
        widgetHasNoDirective : 'this widget has no directive binded.',
        widgetHasUnavailableDirective : 'the directive binded to this widget is not available.',
        actionScriptUnableToFindDirective : 'Unable to find directive : {0}',
        actionScriptFormParamDataTypeError : 'Parameters to directive parameter form is not supportted.',
        actionExecuteFailed : 'Failed to execute widget action : {0}',
        actionScriptExecuteFailed : 'failed to execute widget script : {0}',
        actionScriptFormParamNotMatch : 'Parameter length to directive not match, directive parameter length : {0}, Actual parameter length : {1}',
        directiveParameterFormatFormIsNotAvailable : '[{0}] does not support form as parameter format.',
        dataSourceScriptExecuteFailed : 'Failed to execute data source script : {0}',
        runtimeVariableNotExists : 'Variable "{0}" does not exists',
        requestLog : {
            headerTime : 'Time',
            headerDirective : 'Directive',
            headerStatus : 'Status',
            headerParams : 'Parameters',
            headerResponse : 'Response',
            btnDataDetailShow : 'more',
            status : {
                send : 'Sent',
                success : 'Responsed',
                error : 'Error',
            }
        }
    },
};