module.exports = {
    moduleName : '面板',
    editMode : {
        defaultName : '未命名面板',
        variableAdd : '新建变量',
        variableName : '名称',
        variableDataType : '类型',
        variableDefault : '默认值',
        variableDeleteConfirm : '是否删除该变量？',
        variableEditTitle : '变量配置',
        variableEditNameExists : '变量名称已经存在',
        panelSaved : '面板已保存',
        panelSaveFailed : '面板保存失败',
        panelDeleteSuccess : '面板删除成功',
        panelDeleteConfirmTitle : '面板删除',
        panelDeleteConfirmContent : '是否删除该面板 ?',
        panelChangedSaveConfirmTitle : '面板已修改',
        panelChangedSaveConfirmContent : '面板数据已发生变更，是否保存 ?',
        widgetSettingScriptSnippet : '代码片段',
        widgetSettingScriptSnippetDirectiveExecText : '执行指令（字符串参数）',
        widgetSettingScriptSnippetDirectiveExecHex : '执行指令（HEX参数）',
        widgetSettingScriptSnippetDirectiveExecForm : '执行指令（表单参数）',
        widgetSettingScriptSnippetVariableGet : '获取变量',
        widgetSettingScriptSnippetVariableSet : '设置变量',
        widgetSettingScriptSnippetMsleep : '延时',
        widgetSettingScriptSnippetWidgetValueGet : '获取组件值',
        widgetSettingScriptSnippetWidgetDataSet : '设置组件数据值',
        widgetSettingTitle : '挂件配置',
        widgetSettingAction : '动作',
        widgetSettingActionVariable : '赋值到变量',
        widgetSettingActionDirective : '执行指令',
        widgetSettingActionScript : '运行脚本',
        widgetSettingBindDirective : '绑定指令',
        widgetSettingRequestParams : '请求参数',
        widgetSettingRequestParamQuickInputLabel : '变量 : {0}',
        widgetSettingResponseToVariable : '绑定变量',
        widgetSettingResponseParserEnable : '解析响应内容',
        widgetSettingResponseParserNone : '不绑定',
        widgetSettingResponseParserRaw : 'RAW',
        widgetSettingResponseParserForm : '格式化',
        widgetSettingResponseParserJson : 'JSON',
        widgetSettingViewerVariable : '变量',
        widgetSettingDataSource : '数据源',
        widgetSettingDataSourceVariable : '变量',
        widgetSettingDataSourceScript : '脚本',
        widgetSettingDataSourceExpression :'表达式',
        panelNamePlaceholder : '面板名称',
        widgetDeleteConfirm : '是否删除该组件 ?',
        widgetPanelTitle : '组件',
        variablePanelTitle : '变量',
        widgetZindex : 'Z-Index',
        widgetMoveFrontOneLayer : '前置一层',
        widgetMoveBackOneLayer : '后置一层',
        widgetDataSourceExprUnableToReadVariable : '组件表达式运行失败, 无法获取变量 "{0}"',
        widgetDataSourceExprFailedToExecuteExpr : '组件表达式运行失败，无法解析表达式 [{0}] => [{1}] : {2}',
    },
    dialogWidgetSetting : {
        title : '挂件配置',
        bindDirective : '绑定指令',
        requestParams : '请求参数',
        responseToVariable : '绑定变量',
        responseParserEnable : '解析响应内容',
        viewerVariable : '变量',
        actionScript : '脚本',
        dataSourceScript : '脚本',
        action : {
            label : '动作',
            variable : '赋值到变量',
            directive : '执行指令',
            script : '运行脚本',
        },
        dataSource : {
            label : '数据源',
            variable : '变量',
            script : '脚本',
        },
    },
    noActivePanelDesc : '请打开或创建面板',
    btnCreatePanel : '创建面板',
    mode : {
        edit : '编辑模式',
        run : '运行模式',
    },
    widgetTooltip : '文字提示',
    widgetResize: '尺寸',
    widgetResizeHeight : '高度',
    widgetResizeWidth : '宽度',
    widgets : {
        button : require('../widgets/button/i18n/zh.lang.js'),
        switch : require('../widgets/switch/i18n/zh.lang.js'),
        textInput : require('../widgets/text-input/i18n/zh.lang.js'),
        numberInput : require('../widgets/number-input/i18n/zh.lang.js'),
        slider : require('../widgets/slider/i18n/zh.lang.js'),
        radio : require('../widgets/radio/i18n/zh.lang'),
        select : require('../widgets/select/i18n/zh.lang.js'),
        label : require('../widgets/label/i18n/zh.lang.js'),
        progressBar : require('../widgets/progress-bar/i18n/zh.lang.js'),
        textViewer : require('../widgets/text-viewer/i18n/zh.lang.js'),
        numberViewer : require('../widgets/number-viewer/i18n/zh.lang.js'),
        battery : require('../widgets/battery/i18n/zh.lang.js'),
        thermometer : require('../widgets/thermometer/i18n/zh.lang.js'),
        gauge : require('../widgets/gauge/i18n/zh.lang.js'),
        led : require('../widgets/led/i18n/zh.lang.js'),
        lineChart : require('../widgets/line-chart/i18n/zh.lang.js'),
        timer : require('../widgets/timer/i18n/zh.lang.js'),
        liquidfill : require('../widgets/liquidfill/i18n/zh.lang.js'),
        terminal : require('../widgets/terminal/i18n/zh.lang.js'),
        angleIndicator : require('../widgets/angle-indicator/i18n/zh.lang.js'),
        offsetAngleIndicator : require('../widgets/offset-angle-indicator/i18n/zh.lang.js'),
        groupbox : require('../widgets/groupbox/i18n/zh.lang.js'),
        map : require('../widgets/map/i18n/zh.lang.js'),
        threeDOriViewer : require('../widgets/3d-orientation-viewer/i18n/zh.lang.js'),
    },
    
    dialogVariableSetting : {
        title : '变量配置',
        varName : '名称',
        varNameExists : '变量名称已经存在',
        dataType : '数据类型',
        varDefaultValue : '默认值',
    },
    
    runMode : {
        log : '日志',
        dataTrans : '数据传输',
        variablePanelTitle : '变量',
        widgetHasNoAction : '该组件尚未指定操作',
        widgetHasNoDirective : '该组件尚未绑定任何指令',
        widgetHasUnavailableDirective : '绑定到该组件的指令不可用',
        actionExecuteFailed : '组件动作执行失败：{0}',
        actionScriptExecuteFailed : '组件脚本执行失败：{0}',
        actionScriptUnableToFindDirective : '无法找到指令：{0}',
        actionScriptFormParamNotMatch : '表单参数数量不匹配，请求参数数量：{0}，实际参数数量：{1}',
        actionScriptFormParamDataTypeError : '表单参数数据格式不正确，仅支持数组类型参数',
        dataSourceScriptExecuteFailed : '数据源脚本执行失败：{0}',
        directiveParameterFormatFormIsNotAvailable : '[{0}] 不支持表单形式的参数',
        runtimeVariableNotExists : '变量 "{0}" 不存在',
        requestLog : {
            headerTime : '时间',
            headerDirective : '指令',
            headerStatus : '状态',
            headerParams : '参数',
            headerResponse : '响应',
            btnDataDetailShow : '详情',
            status : {
                send : '已发送',
                success : '已响应',
                error : '错误',
            }
        }
    },
};